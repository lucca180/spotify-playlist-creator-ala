{"version":3,"sources":["SongCard.js","Dialog.js","Spotify.js","App.js","serviceWorker.js","index.js"],"names":["SongCard","props","state","nextProps","this","track","id","selected","index","playAudio","selFunction","Card","className","CardMedia","onClick","image","album","images","url","CardContent","IconButton","disabled","preview_url","Icon","Typography","variant","name","color","artists","Component","DialogBox","useState","ids","setIds","hasPlaylist","playlist","length","useEffect","tracksId","map","JSON","stringify","console","log","extractIds","Dialog","open","onClose","toggle","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","style","minWidth","autoFocus","margin","label","type","onChange","e","target","value","fullWidth","DialogActions","Button","load","SpotifyContent","audio","pause","Audio","play","event","setState","searchText","searchResult","selectedArr","search","a","spotify","limit","result","tracks","catchReturn","key","preventDefault","addToPlaylist","newArr","sel","items","select","selArr","includes","arrIndex","indexOf","splice","push","analyse","loadIds","parse","getTracks","openDialog","RenderSearch","i","RenderPlaylist","toggleDialog","SpotifyWebApi","setAccessToken","token","onKeyPress","InputProps","endAdornment","InputAdornment","position","theme","createMuiTheme","palette","primary","main","scopes","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","App","_token","access_token","StylesProvider","injectFirst","ThemeProvider","href","join","Spotify","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ffcf657e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Icon from '@material-ui/core/Icon';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport \"./App.css\";\n\nclass SongCard extends Component {\n\tconstructor(props) {\n\t\tsuper();\n\t  \tthis.state = {\n\t  \t}\n  \t}\n\n  \tshouldComponentUpdate(nextProps){\n  \t\tif(this.props.track.id !== nextProps.track.id) return true;\n  \t\telse if(this.props.selected !== nextProps.selected) return true;\n  \t\telse return false;\n  \t}\n\n\trender() {\n\t\tconst {track, index, playAudio, selected, selFunction} = this.props;\n\t  return (\n\t    <Card className={\"songCard \" + (selected ? 'selected' : '')}>\n\t\t    <CardMedia onClick={() => selFunction(index)} \n\t\t      \tclassName=\"cardMedia\"\n\t\t        image={track.album.images[1].url}\n\t\t    />\n\t\t    <CardContent className=\"cardContent\">\n\t\t    \t<div className=\"playButton\">\n\t\t    \t\t<IconButton disabled={track.preview_url == null} onClick={() => playAudio(track.preview_url)}>\n\t\t    \t\t\t<Icon>play_arrow</Icon>\n\t\t    \t\t</IconButton>\n\t\t    \t</div>\n\t\t    \t<div className=\"info\">\n\t\t    \t\t<Typography variant=\"body2\">{track.name}</Typography>\n\t\t    \t\t<Typography variant=\"body2\" color=\"textSecondary\">{track.artists[0].name}</Typography>\n\t\t    \t</div>\n\t\t    </CardContent>\n\t    </Card>\n\t  );\n  }\n}\nexport default SongCard;","import React, {useState, useEffect} from 'react'\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport default function DialogBox(props) {\n  const [ids, setIds] = useState('');\n  var hasPlaylist = props.playlist.length !== 0;\n\n  useEffect(() => {\n  \tif(props.playlist.length !== 0) extractIds(props.playlist);\n  \thasPlaylist = props.playlist.length !== 0;\n  })\n\n  function extractIds(playlist){\n  \tvar tracksId = playlist.map(track => {\n\t\treturn track.id;\n\t});\n\n\tsetIds(JSON.stringify(tracksId));\n\tconsole.log('LISTA DE IDS ----> ', JSON.stringify(tracksId));\n  }\n\n  function onChange (e){\n  \tsetIds(e.target.value);\n  } \n\n  return (\n    <div>\n      <Dialog  open={props.open} onClose={props.toggle} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">{!hasPlaylist && \"Inserir IDs\"} {hasPlaylist && \"Copiar IDs\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            {!hasPlaylist && \"Insira as IDs das musicas para visualizar\"} {hasPlaylist && \"Copie as IDs das musicas e analise no Colab\"}\n          </DialogContentText>\n          <TextField\n          \tstyle={{minWidth: 350}}\n            autoFocus\n            variant=\"outlined\" \n            margin=\"dense\"\n            id=\"idList\"\n            label=\"Lista de IDS\"\n            type=\"text\"\n            onChange={onChange}\n            fullWidth\n            value={ids}\n            disabled={props.playlist.length !== 0}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={props.toggle} color=\"primary\">\n            Fechar\n          </Button>\n          {!hasPlaylist && <Button onClick={() => props.load(ids)} color=\"primary\">\n            Enviar\n          </Button>}\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}","import React, { Component } from \"react\";\nimport * as SpotifyWebApi from 'spotify-web-api-js';\n\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Icon from '@material-ui/core/Icon';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\n\nimport SongCard from \"./SongCard.js\";\nimport DialogBox from \"./Dialog.js\";\nimport \"./App.css\";\n\n\nclass SpotifyContent extends Component {\n\tconstructor(props) {\n\t  super();\n\t  this.state = {\n\t  \tsearchText: '',\n\t  \tsearchResult: null,\n\t  \tselectedArr: [],\n\t  \tplaylist: [],\n\t  \topenDialog: false,\n\t  }\n\n\t  this.spotify = new SpotifyWebApi();\n\t  this.spotify.setAccessToken(props.token);\n\t  this.audio = new Audio();\n  }\n\n  playAudio = (url) => {\n  \tthis.audio.pause();\n  \tthis.audio = new Audio(url);\n  \tthis.audio.play();\n  }\n\n  onChange = event => {\n  \tif(event.target.value === \"\") \n  \t\tthis.setState({\n  \t\t\tsearchText: '',\n  \t\t\tsearchResult: null,\n  \t\t\tselectedArr: [],\n  \t\t})\n\n  \telse \n\t  \tthis.setState({\n\t  \t\tsearchText: event.target.value\n\t  \t})\n  }\n\n  search = async () => {\n  \tconst {searchText} = this.state;\n  \tif(searchText === \"\") return;\n  \tvar result = await this.spotify.search(searchText, ['track'], {limit: 5});\n  \tthis.setState({\n  \t\tsearchResult: result.tracks\n  \t});\n  }\n\n  catchReturn = e => {\n  \tif(e.key === 'Enter'){\n      e.preventDefault(); // Ensure it is only this code that rusn\n      this.search();\n  \t}\n  }\n\n  addToPlaylist = () => {\n  \tconst {selectedArr, searchResult, playlist} = this.state;\n\n  \tvar newArr = selectedArr.map(sel => {\n  \t\treturn searchResult.items[sel];\n  \t});\n\n  \tnewArr = [...newArr, ...playlist];\n\n  \tthis.setState({\n  \t\tplaylist: newArr,\n  \t\tsearchResult: null,\n  \t\tselectedArr: [],\n  \t\tsearchText: '',\n  \t});\n  \tconsole.log(newArr);\n  }\n\n  select = (index) => {\n  \tvar selArr = this.state.selectedArr;\n\n  \tif(selArr.includes(index)){\n  \t\tvar arrIndex = selArr.indexOf(index);\n\t\t\tif (arrIndex > -1) {\n\t\t\t  selArr.splice(arrIndex, 1);\n\t\t\t}\n  \t}\n\n  \telse selArr.push(index);\n\n  \tthis.setState({selectedArr: selArr})\n  }\n\n  analyse = async () => {\n  \tconst {playlist} = this.state;\n  \t//const arrayColumn = (arr, n) => arr.map(x => x[n]);\n\n\t\tvar tracksId = playlist.map(track => {\n\t\t\treturn track.id;\n\t\t});\n\n\t\tconsole.log('LISTA DE TRACKS ------> ', JSON.stringify(tracksId));\n\n\t\t// var features = await this.spotify.getAudioFeaturesForTracks(tracksId);\n\n\t\t// var arr = []\n\n\t\t// for (let track of features.audio_features){\n\t\t// \tlet trackArr = [track.danceability, track.energy, track.valence]\n\t\t// \tarr.push(trackArr);\n\t\t// }\n\n\t\t// var [danceability, energy, valence] = [arrayColumn(arr, 0), arrayColumn(arr, 1), arrayColumn(arr, 2)]\n\t\t// var means = {danceability: mean(danceability), energy: mean(energy), valence: mean(valence)};\n\t\t// var variances = {danceability: std(danceability), energy: std(energy), valence: std(valence)};\n\t\t// var varianceMean = mean(std(danceability), std(energy), std(valence));\n\n\t\t// console.log(arr);\n  // \tconsole.log(danceability, energy, valence)\n  // \tconsole.log(means);\n  // \tconsole.log(variances);\n  // \tconsole.log(varianceMean);\n\n  // \tthis.getResult(means, variances, varianceMean);\n  }\n\n //  getKeyByValue(object, value) {\n\t//   return Object.keys(object).find(key => object[key] === value);\n\t// }\n\n //  getResult(means, variances, varianceMean){\n // \t\tvar dance, energy, valence;\n // \t\tif(variances.danceability > 0.3) dance = \"ecletic\";\n // \t\telse if(means.danceability <= 0.4) dance = \"low\";\n // \t\telse if(means.danceability > 0.7) dance = \"high\";\n // \t\telse dance = \"medium\";\n\n // \t\tswitch(dance){\n // \t\t\tcase 'low':\n // \t\t\t\tconsole.log(\"Dançar não é muito a sua praia, você prefere musicas que são pouco dançáveis.\");\n // \t\t\t\tbreak;\n // \t\t\tcase 'medium':\n // \t\t\t\tconsole.log(\"Suas músicas são boas para dançar, mas talvez não seja isso que te atraia nelas.\");\n // \t\t\t\tbreak;\n // \t\t\tcase 'high':\n // \t\t\t\tconsole.log(\"As músicas que você escolheu são perfeitas para dançar, já pode dar uma festa com ela.\");\n // \t\t\t\tbreak;\n // \t\t\tcase 'ecletic':\n // \t\t\t\tconsole.log(\"Sua playlist tem de tudo um pouco. Tem músicas ótimas para dançar e também tem músicas ótimas para ficar só contemplando.\")\n // \t\t\t\tbreak;\n // \t\t\tdefault:\n // \t\t\t\tconsole.log(\"Ocorreu algum erro ou sua playlist é boa demais para esse algorítmo analisar.\")\n // \t\t}\n\n // \t\tif(variances.energy > 0.3) energy = \"ecletic\";\n // \t\telse if(means.energy <= 0.4) energy = \"low\";\n // \t\telse if(means.energy > 0.7) energy = \"high\";\n // \t\telse energy = \"medium\";\n\n // \t\tswitch(energy){\n // \t\t\tcase 'low':\n // \t\t\t\tconsole.log(\"Sua playlist tem musicas bem calmas. São boas para ficar contemplando o pôr-do-sol.\");\n // \t\t\t\tbreak;\n // \t\t\tcase 'medium':\n // \t\t\t\tconsole.log(\"Você gosta das coisas um pouco agitadas. Sua playlsit possivelmente tem um rock aqui e ali...\");\n // \t\t\t\tbreak;\n // \t\t\tcase 'high':\n // \t\t\t\tconsole.log(\"Sua playlist é muito agitada. Provavelmente está cheia de musicas barulhentas para incomodar os vizinhos.\");\n // \t\t\t\tbreak;\n // \t\t\tcase 'ecletic':\n // \t\t\t\tconsole.log(\"Sua playlist tem músicas bem agitadas mas também tem músicas mais calmas.\")\n // \t\t\t\tbreak;\n // \t\t\tdefault:\n // \t\t\t\tconsole.log(\"Ocorreu algum erro ou sua playlist é boa demais para esse algorítmo analisar.\")\n // \t\t}\n\n // \t\tif(variances.valence > 0.3) valence = \"ecletic\";\n // \t\telse if(means.valence <= 0.4) valence = \"low\";\n // \t\telse if(means.valence > 0.7) valence = \"high\";\n // \t\telse valence = \"medium\";\n\n // \t\tswitch(valence){\n // \t\t\tcase 'low':\n // \t\t\t\tconsole.log(\"Essa é sua playlist de bad, certo? Provavelmente tem músicas mais tristes para os seus sábados chuvosos.\");\n // \t\t\t\tbreak;\n // \t\t\tcase 'medium':\n // \t\t\t\tconsole.log(\"Suas musicas são bem equilibradas. Não são completamente negativas mas também não são 100% animadas e felizes. \");\n // \t\t\t\tbreak;\n // \t\t\tcase 'high':\n // \t\t\t\tconsole.log(\"100% Good Vibes. Sua playlist é composta de músicas alegres, positivas e good vibes. Parabéns :)\");\n // \t\t\t\tbreak;\n // \t\t\tcase 'ecletic':\n // \t\t\t\tconsole.log(\"Sua playlist tem músicas alegres e também tem músicas tristes. É como sol e chuva.\")\n // \t\t\t\tbreak;\n // \t\t\tdefault:\n // \t\t\t\tconsole.log(\"Ocorreu algum erro ou sua playlist é boa demais para esse algorítmo analisar.\")\n // \t\t}\n\t// }\n\n\tloadIds = async ids => {\n\t\ttry{\n\t\tids = JSON.parse(ids);\n\t\tvar result = await this.spotify.getTracks(ids);\n\t\tthis.setState({\n\t\t\tplaylist: [...result.tracks],\n\t\t\topenDialog: false,\n\t\t})\n\n\t\tconsole.log(result);\n\t\t}catch(e){console.log(e);}\n\t}\n\n  RenderSearch = () => {\n\t\tvar items = this.state.searchResult.items;\n\t\tvar selArr = this.state.selectedArr;\n\n\t\tvar renderArr = items.map((i, index) => {\n\t\t\treturn <SongCard key={i.id} index={index} playAudio={this.playAudio} selected={selArr.includes(index)} selFunction={this.select} track={i}/>\n\t\t})\n\n\t\treturn renderArr;\n\t}\n\n\tRenderPlaylist = () => {\n\t\tvar tracks = this.state.playlist;\n\n\t\tvar renderArr = tracks.map((i, index) => {\n\t\t\treturn <SongCard key={i.id} index={index} playAudio={this.playAudio} selFunction={() => {return}} track={i}/>\n\t\t})\n\n\t\treturn renderArr;\n\t}\n\n\n\ttoggleDialog = () => {\n\t\tthis.setState({openDialog: !this.state.openDialog});\n\t}\n\n\trender() {\n\t\tconst {RenderSearch, RenderPlaylist} = this;\n\t\tconst {selectedArr, searchText, playlist, openDialog, searchResult} = this.state\n\t  return (\n\t    <div className=\"content\">\n\t    \t<DialogBox open={openDialog} toggle={this.toggleDialog} playlist={playlist} load={this.loadIds}/>\n\t    \t\t<div className=\"search\">\n\t    \t\t\t<TextField className=\"searchInput\" label=\"Pesquisar Música\" margin=\"normal\" variant=\"outlined\" \n\t    \t\t\tonKeyPress={this.catchReturn}  \n\t    \t\t\tonChange={this.onChange} \n\t    \t\t\tvalue={searchText}\n\t    \t\t\tInputProps={{\n\t            endAdornment:\n\t              <InputAdornment position=\"end\">\n\t                <IconButton onClick={this.search}>\n\t                \t<Icon>search</Icon>\n\t                </IconButton>\n\t              </InputAdornment>\n            }}\n\t    \t\t\t/>\n\t    \t\t\t{selectedArr.length > 0 && \n\t    \t\t\t\t<Button variant=\"contained\" className=\"addButton\" onClick={this.addToPlaylist} color=\"primary\">\n\t    \t\t\t\t\t{selectedArr.length} Adicionar à playlist\n\t    \t\t\t\t</Button>\n\t    \t\t\t}\n\t    \t\t\t{(!searchResult && playlist.length > 0) && \n\t    \t\t\t\t<Button variant=\"contained\" className=\"addButton\" onClick={this.toggleDialog} color=\"primary\">\n\t    \t\t\t\t\tAnalisar Playlist\n\t    \t\t\t\t</Button>\n\t    \t\t\t}\n\t    \t\t\t{(!searchResult && playlist.length === 0) && \n\t    \t\t\t\t<Button variant=\"contained\" className=\"addButton\" onClick={this.toggleDialog} color=\"primary\">\n\t    \t\t\t\t\tInserir IDs\n\t    \t\t\t\t</Button>\n\t    \t\t\t}\n\t    \t\t</div>\n\t    \t\t<div className=\"searchResult\">\n\t    \t\t\t{this.state.searchResult && <RenderSearch/> }\n\t    \t\t\t{!this.state.searchResult && <RenderPlaylist/>}\n\t    \t\t</div>\n\t    </div>\n\t  );\n  }\n}\nexport default SpotifyContent;","import React, { Component } from \"react\";\nimport SpotifyContent from \"./Spotify.js\";\nimport { StylesProvider, ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\nimport \"./App.css\";\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#1DB954',\n    },\n  },\n});\n\n\nexport const authEndpoint = 'https://accounts.spotify.com/authorize';\n// Replace with your app's client ID, redirect URI and desired scopes\nconst clientId = \"a0bd3685465a4548aceeb4be27de1550\";\nconst redirectUri = \"https://lucca180.github.io/spotify-playlist-creator-ala\";\nconst scopes = [];\n// Get the hash of the url\nconst hash = window.location.hash\n  .substring(1)\n  .split(\"&\")\n  .reduce(function(initial, item) {\n    if (item) {\n      var parts = item.split(\"=\");\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n    }\n    return initial;\n  }, {});\nwindow.location.hash = \"\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      token: null,\n    }\n  }\n  componentDidMount() {\n    // Set token\n    let _token = hash.access_token;\n    if (_token) {\n      // Set token\n      this.setState({\n        token: _token\n      });\n      console.log(_token);\n    }\n  }\n\nrender() {\n  return (\n    <StylesProvider injectFirst>\n      <ThemeProvider theme={theme}>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1>Playlist Creator</h1>\n            <h3>Crie sua playlist que um computador irá analisar e te julgar :)</h3>\n            <h3>Por Lucca Ricardo - <a href=\"https://colab.research.google.com/drive/12b1m7vedWXgqBkvALy55OXzGfQtRuZuS\" target=\"_blank\">Colab</a> / <a href=\"https://github.com/lucca180/spotify-playlist-creator-ala\" target=\"_blank\">Github</a></h3>\n          {!this.state.token && (\n            <a className=\"btn-login\"\n              href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}&response_type=token&show_dialog=true`}\n            >\n              Conectar ao Spotify\n            </a>\n          )}\n          </header>\n          {this.state.token && (\n            <SpotifyContent token={this.state.token}/>\n          )}\n        </div>\n      </ThemeProvider>\n    </StylesProvider>\n  );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}